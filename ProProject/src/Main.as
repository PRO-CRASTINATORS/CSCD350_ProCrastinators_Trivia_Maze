package {	import com.natejc.utils.StageRef;	import flash.display.MovieClip;	import flash.events.Event;	import classes.Room;	import classes.Door;	import classes.MazeGen;	import classes.Player;	import classes.MenuScreen;	import com.natejc.input.KeyboardManager;	//import com.natejc.input.KeyCode;		import flash.net.URLRequest;	import flash.net.URLLoader;	import flash.events.MouseEvent;	import classes.DatabaseHandler;		/**	 * ...	 * @author Zac	 */	public class Main extends MovieClip	{				public 		var mcScreen				:MovieClip;//public	 	var pool					:Array = new Array(new Link(), new StormTrooper(), new Yoshi());		private 	var index					:Number = 0;		private 	var mazeMap					:Array;		private		var player					:Player;		private 	var sign					:MovieClip;		private 	var loader					:URLLoader;		private 	var _Menu					:MenuScreen;		private 	var _Title					:MovieClip;		private 	var _Type					:String;		private 	var _Difficulty				:String;				public function Main()		{			this.stage.focus = this.stage;						StageRef.stage = this.stage;						KeyboardManager.init(this.stage);						init();					}				private function init():void		{			var test:DatabaseHandler = new DatabaseHandler();//trace(test.getQuestions());			this._Title = new TitleScreen();			this.stage.addChild(this._Title);			this._Title.PlayButton.addEventListener(MouseEvent.CLICK, this.loadMenu, false, 0, true);					}				private function loadMenu($me:MouseEvent):void		{			this._Title.PlayButton.removeEventListener(MouseEvent.CLICK, this.loadMenu, false);			this.stage.removeChild(this._Title);			this._Title = null;						this._Menu = new MenuScreen();			this._Menu.sig.addOnce(this.loadGame);		}				private function loadGame($me:MouseEvent):void		{			this._Type = this._Menu.getType();			this._Difficulty = this._Menu.getDiff();			this._Menu.kill();						this.loader = new URLLoader(new URLRequest("map1.txt"));						this.loader.addEventListener(Event.COMPLETE, loadComplete);		}				public function loadComplete(e:Event):void		{			var maze:MazeGen = new MazeGen(this._Type);			maze.loadMap(this.loader);			this.mazeMap = maze.getMap();				this.player = new Player(this._Type);			this.player.setPosCol(maze.getStartCol());			this.player.setPosRow(maze.getStartRow());			this.player.sigColide.add(this.testCollisions);			this.player.sigRoom.add(this.getRoom);						Room(mazeMap[this.player.getPosRow()][this.player.getPosCol()]).addRoomToStage();		}				private function getRoom(row:Number, col:Number):void		{			this.player.rRoom = Room(this.mazeMap[row][col]);		}				public function testCollisions():void		{			if (this.player) 			{				var room: Room = Room(mazeMap[this.player.getPosRow()][this.player.getPosCol()]);				var temp:Array = room.getDoors();								for (var i:int = 0; i < temp.length; i++)				{					if (temp[i])					{								if(player.character.Mask.hitTestObject(Door(temp[i]).getMc()))						{								if (!sign)							{								sign = Door(temp[i]).getDoorStatus();								this.stage.addChild(sign);								this.player.mcTouchingDoor = Door(temp[i]).getMc();							}							sign.x = player.character.x;							sign.y = player.character.y - 15;							break;						}						else if (sign)						{							this.player.mcTouchingDoor = null;							this.stage.removeChild(sign);							this.sign = null;						}					}									}			}		}//end of function					}	}